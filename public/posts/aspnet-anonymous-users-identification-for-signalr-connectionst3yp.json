{"date":1619293118,"cats":[0,13,15,17,48],"content":"<p>I have tried to use identity for non authenticated users (visitors) and while my app is using SignalR and I need to identify all signalR connections are coming from the same user I had to make some tricks and here you are the code</p>\n\n<p><strong>The .Net Hub class</strong></p>\n<pre><code>using Microsoft.AspNetCore.SignalR;\nusing ReturnTrue.AspNetCore.Identity.Anonymous;\nusing System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace WebApplication1.Lib\n{\n    public class SignalRHub : Hub\n    {\n        public static ConcurrentDictionary<string, list<string=\"\">&gt; ConnectedUsers = new();\n\n        public string GetMyToken()\n        {\n            var us = ConnectedUsers.Where(user =&gt; user.Value.Contains(Context.ConnectionId)).FirstOrDefault();\n            return us.Key;\n        }\n\n        public override Task OnConnectedAsync()\n        {\n            var httpCtx = Context.GetHttpContext();\n            var feature = httpCtx.Features.Get<ianonymousidfeature>();\n            var userName = (feature != null &amp;&amp; feature.AnonymousId != \"\")? feature.AnonymousId : Guid.NewGuid().ToString(\"D\", CultureInfo.InvariantCulture);\n\n            // Try to get a List of existing user connections from the cache\n            var existingUserConnectionIds = ConnectedUsers.TryGetValue(userName, out List<string> lst) ? lst : new();\n\n            // First add to a List of existing user connections (i.e. multiple web browser tabs)\n            existingUserConnectionIds.Add(Context.ConnectionId);\n\n            // Add to the global dictionary of connected users\n            ConnectedUsers.TryAdd(userName, existingUserConnectionIds);\n            Console.WriteLine($\"{userName} on {Context.ConnectionId} joined the conversation\");\n            return base.OnConnectedAsync();\n        }\n        public void SendMessage(string name, string message)\n        {\n            Clients.All.SendAsync(\"ReceiveMessage\", name, message);\n        }\n\n        public override Task OnDisconnectedAsync(Exception exception)\n        {\n            var us = ConnectedUsers.Where(user =&gt; user.Value.Contains(Context.ConnectionId)).FirstOrDefault();\n            if (ConnectedUsers.TryGetValue(us.Key, out var existingUserConnectionIds))\n            {\n                existingUserConnectionIds.Remove(Context.ConnectionId);\n                if (existingUserConnectionIds.Count == 0) ConnectedUsers.TryRemove(us.Key, out _);\n            }\n\n            Clients.All.SendAsync(\"Users\", \"system\", $\"{Context.ConnectionId} left the conversation\");\n            Console.WriteLine($\"{us.Key} on {Context.ConnectionId} left the conversation\");\n            return base.OnDisconnectedAsync(exception);\n        }\n        //public override Task OnReconnected()\n        //{\n        //    string name = Context.User.Identity.Name;\n\n        //    if (!_connections.GetConnections(name).Contains(Context.ConnectionId))\n        //    {\n        //        _connections.Add(name, Context.ConnectionId);\n        //    }\n\n        //    return base.OnReconnected();\n        //}\n    }\n}</string></ianonymousidfeature></string,></code></pre>\n\n<p><strong>StartUp class</strong></p>\n<p>We need to install <span style=\"color: rgb(39, 78, 19);\">ReturnTrue.AspNetCore.Identity.Anonymous</span> extension</p>\n\n<pre><code>using Microsoft.AspNetCore.Authentication.Cookies;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ReturnTrue.AspNetCore.Identity.Anonymous;\nusing WebApplication1.Lib;\n\nnamespace WebApplication1\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllersWithViews();\n            services.AddSignalR();\n            services.AddResponseCompression();\n            services.AddControllers().AddJsonOptions(opt =&gt;\n            {\n                opt.JsonSerializerOptions.PropertyNamingPolicy = null;\n            });\n            services.AddDbContext<appdbcontext>(opt =&gt; opt.UseSqlite(Configuration.GetConnectionString(\"cs\")));\n            services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme).AddCookie();\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseExceptionHandler(\"/Home/Error\");\n                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n                app.UseHsts();\n            }\n\n            app.UseHttpsRedirection();\n            app.UseStaticFiles();\n\n            app.UseAnonymousId();\n\n            app.UseRouting();\n\n            app.UseResponseCompression();\n\n            app.UseEndpoints(endpoints =&gt;\n            {\n                endpoints.MapControllerRoute(\n                    name: \"default\",\n                    pattern: \"{controller=Home}/{action=Index}/{id?}\");\n\n                endpoints.MapHub<signalrhub>(\"/hub\");\n            });\n        }\n    }\n}</signalrhub></appdbcontext></code></pre>\n\n\n<p><strong>The Javascript client</strong></p>\n<pre><code>function LoadProducts() {\n    var tr = '';\n    $.ajax({\n        url: '/Product/GetProducts',\n        method: 'GET',\n        success: (result) =&gt; {\n            $.each(result, (k, v) =&gt; {\n                tr += `\n                            ${v.Name}\n                            ${v.Stock}\n                            \n                                <a href=\"/product/Edit?id=${v.Id}\">Edit</a> |\n                                <a href=\"/product/Details?id=${v.Id}\">Details</a> |\n                                <a href=\"/product/Delete?id=${v.Id}\">Delete</a> \n                            \n                          `\n            });\n            $(\"#tablebody\").html(tr);\n        },\n        error: console.log\n    })\n}\n\n\n$(() =&gt; {\n    console.log(\"Hello SignalR\");\n    LoadProducts();\n    var connection = new signalR.HubConnectionBuilder()\n        .withUrl(\"hub\")\n        .withAutomaticReconnect([0, 0, 10000]).build();\n\n    connection.on(\"ProductsChanged\", LoadProducts);\n    connection.onreconnecting(error =&gt; console.log(`Connection lost due to error \"${error}\". Reconnecting.`));\n    connection.onreconnected(connectionId =&gt; console.log(`Connection reestablished. Connected with connectionId \"${connectionId}\".`));\n    connection.start()\n        .then(() =&gt; console.log('Connection started'))\n        .catch(err =&gt; console.log('Error while starting connection: ' + err));   \n})</code></pre>","title":"Asp.net Anonymous users identification for SignalR connections ","slug":"aspnet-anonymous-users-identification-for-signalr-connectionst3yp"}