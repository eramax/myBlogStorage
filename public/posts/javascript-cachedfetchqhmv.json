{"date":1598643330,"cats":[0,14,15,19,50],"content":"<p>We usually need to fetch files that should be persist locally in the client device so there we can use the caching method to enhance this feature.</p>\n<h3><strong>The cachedFetch</strong></h3>\n<pre><code>export const cachedFetch = async(url, expiry) =&gt; {\n    \n    let cacheKey = url\n    let cached = localStorage.getItem(cacheKey)\n    let whenCached = localStorage.getItem(cacheKey + ':ts')\n    if (cached !== null &amp;&amp; whenCached !== null) {\n        let age = (Date.now() - whenCached) / 1000\n        if (age &lt; expiry) {\n            return Promise.resolve(cached)\n        } else {\n            localStorage.removeItem(cacheKey)\n            localStorage.removeItem(cacheKey + ':ts')\n        }\n    }\n    console.log(\"Fetching\")\n    let req = await fetch(url, {cache: \"force-cache\", referrer: \"\"})\n    let res = await req.text()\n    localStorage.setItem(cacheKey, res)\n    localStorage.setItem(cacheKey+':ts', Date.now())\n    return res;\n}\n</code></pre>\n\n<h3><strong>How to use it</strong></h3>\n\n<pre><code>    const expiry = 7 * 24 * 60 * 60 // 7 days default\n    let res = await cachedFetch(x,expiry)</code></pre>","title":"Javascript cachedFetch ","slug":"javascript-cachedfetchqhmv"}