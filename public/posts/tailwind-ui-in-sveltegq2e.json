{"date":1596830278,"cats":[0,14,15,19,36],"content":"<p><span style=\"font-family: Verdana, Geneva, sans-serif; font-size: 16px;\">The&nbsp;<a href=\"https://tailwindui.com/\" style=\"\">Tailwind UI</a>&nbsp;dynamic code is written using&nbsp;<a href=\"https://github.com/alpinejs/alpine/\" style=\"\">Alpine.js</a>, so most of the integration effort goes into translating the Alpine.js code to Svelte.</span></p>\n<p><span style=\"font-family: Verdana, Geneva, sans-serif; font-size: 16px;\">Update: Since I wrote this the Tailwind UI site has changed to use informative comments instead of Alpine code samples. The Svelte techniques below still apply.</span></p>\n<h1>Conditional Showing of Elements</h1>\n<h3>Alpine:</h3>\n<pre><span>&lt;<span>div</span> <span>x-data</span>=<span>\"{open: true}\"</span>&gt;<br>   </span><span>&lt;<span>div</span> <span>x-show</span>=<span>\"open\"</span>&gt;</span><span>...</span><span>&lt;/<span>div</span>&gt;</span><span>&lt;/<span>div</span>&gt;</span><code></code></pre>\n\n<h3>Svelte:</h3>\n<pre><span>&lt;<span>script</span>&gt;</span><span>\n  <span>let</span> open = <span>true</span>;\n</span><span>&lt;/<span>script</span>&gt;</span><span>&lt;<span>div</span>&gt;</span><span>\n    {#if open}\n        </span><span>&lt;<span>div</span>&gt;</span><span>...</span><span>&lt;/<span>div</span>&gt;</span><span>\n    {/if}\n</span><span>&lt;/<span>div</span>&gt;</span></pre>\n\n<h2><span style=\"font-size: 36px;\">Conditional Classes</span></h2>\n<h3>Alpine:</h3>\n<h3><code><span>\n            <pre>&lt;<span>div</span> <span>:class</span>=<span>\"{'block': open, 'hidden': !open}\"</span>&gt;...<span>&lt;/<span>div</span>&gt;</span></pre>\n    </span></code></h3>\n<h3>Svelte:</h3>\n<pre><code><span>&lt;<span>div</span> <span>class:block</span>=<span>{open}</span> <span>class:hidden</span>=<span>{!open}</span>&gt;</span>...<span>&lt;/<span>div</span>&gt;</span></code></pre>\n<h2>Event Handlers</h2><h2>\n</h2><h2>Button Click</h2>\n<h3>Alpine:</h3>\n<pre><code><span>&lt;<span>button</span> @<span>click</span>=<span>\"open = !open\"</span>&gt;</span>...<span>&lt;/<span>button</span>&gt;</span>\n</code></pre>\n<h3>Svelte:</h3>\n<pre><code><span>&lt;<span>button</span> <span>on:click</span>=<span>{()</span> =&gt;</span> open = !open}&gt;...<span>&lt;/<span>button</span>&gt;</span>\n</code></pre>\n<h2>Click Outside</h2>\n<h3>Alpine:</h3>\n<pre><code><span>&lt;<span>div</span> @<span>click.away</span>=<span>\"open = false\"</span>&gt;</span>\n    ...\n    <span>&lt;<span>div</span> <span>x-show</span>=<span>{open}</span>&gt;</span>...<span>&lt;/<span>div</span>&gt;</span>\n<span>&lt;/<span>div</span>&gt;</span>\n</code></pre>\n<h3>Svelte (<a href=\"https://svelte.dev/repl/dae848c2157e48ab932106779960f5d5?version=3.19.2\">REPL</a>):</h3>\n<pre><code>\n<span>&lt;<span>script</span>&gt;</span><span>\n<span><span>function</span> <span>clickOutside</span>(<span>node, { enabled: initialEnabled, cb }</span>) </span>{\n    <span>const</span> handleOutsideClick = <span>(<span>{ target }</span>) =&gt;</span> {\n      <span>if</span> (!node.contains(target)) {\n        cb();\n      }\n    };\n    <span><span>function</span> <span>update</span>(<span>{enabled}</span>) </span>{\n      <span>if</span> (enabled) {\n        <span>window</span>.addEventListener(<span>'click'</span>, handleOutsideClick);\n      } <span>else</span> {\n        <span>window</span>.removeEventListener(<span>'click'</span>, handleOutsideClick);\n      }\n    }\n    update(initialEnabled);\n    <span>return</span> {\n      update,\n      destroy() {\n        <span>window</span>.removeEventListener( <span>'click'</span>, handleOutsideClick );\n      }\n    };\n  }\n  <span>let</span> open = <span>true</span>;\n</span><span>&lt;/<span>script</span>&gt;</span>\n<span>&lt;<span>div</span> <span>use:clickOutside</span>=<span>{{</span> <span>enabled:</span> <span>open</span>, <span>cb:</span> () =&gt;</span> open = false }}&gt;\n   <span>&lt;<span>button</span>&gt;</span>...<span>&lt;/<span>button</span>&gt;</span>\n   {#if open}\n    <span>&lt;<span>div</span>&gt;</span>\n      ...\n    <span>&lt;/<span>div</span>&gt;</span>\n  {/if}\n<span>&lt;/<span>div</span>&gt;</span>\n</code></pre>\n<h2>Key Press</h2>\n<h3>Alpine:</h3>\n<pre><code><span>&lt;<span>div</span> @<span>keydown.window.escape</span>=<span>\"open = false\"</span>&gt;</span>\n    ...\n<span>&lt;/<span>div</span>&gt;</span>\n</code></pre>\n<h3>Svelte:</h3>\n<pre><code><span>&lt;<span>script</span>&gt;</span><span>\n    <span><span>function</span> <span>handleEscape</span>(<span>{key}</span>) </span>{\n        <span>if</span> (key === <span>'Escape'</span>) {\n            open = <span>false</span>;\n        }\n    }\n</span><span>&lt;/<span>script</span>&gt;</span>\n<span>&lt;<span>svelte:window</span> <span>on:keyup</span>=<span>{handleEscape}</span> /&gt;</span>\n{#if open}\n<span>&lt;<span>div</span>&gt;</span>...<span>&lt;/<span>div</span>&gt;</span>\n{/if}\n</code></pre>\n<p><span style=\"font-family: Verdana, Geneva, sans-serif; font-size: 16px;\">This could also be done with a&nbsp;<code>use:</code>&nbsp;action similar to the Click Outside example.</span></p>\n<h1>Transitions</h1>\n<div>\n    <h3>Alpine</h3>\n    <pre><code><span>&lt;<span>div</span>\n    <span>x-transition:enter</span>=<span>\"transition ease-out duration-100\"</span>\n    <span>x-transition:enter-start</span>=<span>\"transform opacity-0 scale-95\"</span>\n    <span>x-transition:enter-end</span>=<span>\"transform opacity-100 scale-100\"</span>\n    <span>x-transition:leave</span>=<span>\"transition ease-in duration-75\"</span>\n    <span>x-transition:leave-start</span>=<span>\"transform opacity-100 scale-100\"</span>\n    <span>x-transition:leave-end</span>=<span>\"transform opacity-0 scale-95\"</span>&gt;</span>\n ...\n<span>&lt;/<span>div</span>&gt;</span>\n</code></pre>\n    <h3>Svelte</h3>\n    <pre><code><span>&lt;<span>script</span>&gt;</span><span>\n  <span>import</span> { scale } <span>from</span> <span>'svelte/transition'</span>;\n  <span>import</span> { cubicIn, cubicOut } <span>from</span> <span>'svelte/easing'</span>;\n</span><span>&lt;/<span>script</span>&gt;</span>\n<span>&lt;<span>div</span> <span>in:scale</span>=<span>{{</span> <span>duration:</span> <span>100</span>, <span>start:</span> <span>0.95</span>, <span>easing:</span> <span>cubicOut</span> }}\n     <span>out:scale</span>=<span>{{</span> <span>duration:</span> <span>75</span>, <span>start:</span> <span>0.95</span>, <span>easing:</span> <span>cubicIn</span> }}&gt;</span>\n  Start is the scale value divided by 100.\n<span>&lt;/<span>div</span>&gt;</span>\n</code></pre>\n</div><br><span style=\"font-size: 16px; font-family: Verdana, Geneva, sans-serif;\"><strong style=\"\">Source</strong> : </span><a href=\"https://imfeld.dev/notes/tailwind_in_svelte\"><span style=\"font-size: 16px; font-family: Verdana, Geneva, sans-serif;\">https://imfeld.dev/notes/tailwind_in_svelte</span></a>","title":"Tailwind UI in Svelte","slug":"tailwind-ui-in-sveltegq2e"}