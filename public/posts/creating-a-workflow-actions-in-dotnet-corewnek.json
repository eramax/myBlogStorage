{"date":1594586287,"cats":[0,13,14,17,48],"content":"<p>This is a sample code for creating a workflow actions</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\n\nnamespace Workflow_6\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello Workflow!\");\n            var wf = new Workflow(new WorkflowStorage\n                {Id = 100, Api = new Dictionary<string, string=\"\"> {{\"Name\", \"Ahmed\"}, {\"Email\", \"ahmed@yahoo.com\"}}});\n            wf.Add(x =&gt;\n            {\n                Console.WriteLine($\"My Name is {x.Api[\"Name\"]}\");\n                return null;\n            });\n\n            wf.Add(x =&gt;\n            {\n                Console.WriteLine($\"My Email is {x.Api[\"Email\"]}\");\n                return null;\n            });\n\n            wf.Add(x =&gt;\n            {\n                Console.WriteLine($\"My Id is {x.Id}\");\n                return null;\n            });\n\n            wf.Add(x =&gt;\n            {\n                Console.WriteLine($\"Changed Id to 500\");\n                x.Id = 500;\n                return null;\n            });\n\n            wf.Add(x =&gt;\n            {\n                Console.WriteLine($\"My updated Id is {x.Id}\");\n                return null;\n            });\n\n            wf.Add(x =&gt;\n            {\n                Console.WriteLine($\"Generate Exception\");\n                return new Exception(\"Don't Continue\");\n            });\n            \n            wf.Add(x =&gt;\n            {\n                Console.WriteLine($\"I will not be executed\");\n                return null;\n            });\n            wf.Execute();\n        }\n    }\n\n    class WorkflowStorage\n    {\n        public int Id { get; set; }\n        public Dictionary<string, string=\"\"> Api { get; set; }\n    }\n\n    class Workflow\n    {\n        private List<func<workflowstorage, exception=\"\">&gt; _actions;\n        private WorkflowStorage _storage;\n\n        public Workflow(WorkflowStorage storage, params Func<workflowstorage, exception=\"\">[] actions)\n        {\n            _storage = storage;\n            _actions = new List<func<workflowstorage, exception=\"\">&gt;();\n            if (actions?.Length &gt; 0) _actions.AddRange(actions);\n        }\n\n        public void Add(Func<workflowstorage, exception=\"\"> action)\n        {\n            if (action != null) _actions.Add(action);\n        }\n\n        public Exception Execute()\n        {\n            Exception ex = null;\n            for (var i = 0; i &lt; _actions.Count &amp;&amp; ex == null; i++)\n                ex = _actions[i](_storage);\n            return ex;\n        }\n    }\n}\n</workflowstorage,></func<workflowstorage,></workflowstorage,></func<workflowstorage,></string,></string,></code></pre>\n\n<p><strong>The Output is&nbsp;</strong></p><p><img src=\"https://raw.githubusercontent.com/eramax/myBlogStorage/master/public/uploads/2020/6/1594586287bepba.png\" style=\"width: 574px; height: 356px;\"></p><p>Regards</p><p><br></p>","title":"creating a workflow actions in dotnet core","slug":"creating-a-workflow-actions-in-dotnet-corewnek"}