{"date":1594640113,"cats":[0,13,14,48],"content":"<p>I made this simple example to describe events in C#.</p>\n\n<pre><code>using System;\nusing System.Threading;\nusing System.Timers;\nusing Timer = System.Timers.Timer;\n\nnamespace Events_7\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n            var systemMonitor = new SystemMonitor(1000);\n            var app1 = new App(\"App1\", systemMonitor);\n            var app2 = new App(\"App2\", systemMonitor);\n            var app3 = new App(\"App3\", systemMonitor);\n            Thread.Sleep(60000);\n        }\n    }\n\n    public class App\n    {\n        public App(string name, SystemMonitor systemMonitor)\n        {\n            systemMonitor.CPU_Subscribe((sender, e) =&gt;\n                Console.WriteLine(\n                    $\"Subscriber - {name} - CPU - {(sender as PropertyWithEvent<int>)?.LastModified} - {(sender as PropertyWithEvent<int>)?.Value} \"));\n            systemMonitor.RAM_Subscribe((sender, e) =&gt;\n                Console.WriteLine(\n                    $\"Subscriber - {name} - RAM - {(sender as PropertyWithEvent<int>)?.LastModified} - {(sender as PropertyWithEvent<int>)?.Value} \"));\n            systemMonitor.NET_Subscribe((sender, e) =&gt;\n                Console.WriteLine(\n                    $\"Subscriber - {name} - NET - {(sender as PropertyWithEvent<int>)?.LastModified} - {(sender as PropertyWithEvent<int>)?.Value} \"));\n        }\n    }\n\n    public class PropertyWithEvent<t>\n    {\n        public event EventHandler WhenIChange;\n        public DateTime LastModified { get; set; }\n\n        private T _value;\n\n        public T Value\n        {\n            get =&gt; _value;\n            set\n            {\n                _value = value;\n                LastModified = DateTime.Now;\n                WhenIChange?.Invoke(this, EventArgs.Empty);\n            }\n        }\n    }\n\n    public class SystemMonitor\n    {\n        PropertyWithEvent<int> CPU { get; set; }\n        PropertyWithEvent<int> RAM { get; set; }\n        PropertyWithEvent<int> NET { get; set; }\n\n        private Timer _timer;\n\n        public SystemMonitor(int ms)\n        {\n            CPU = new PropertyWithEvent<int>();\n            RAM = new PropertyWithEvent<int>();\n            NET = new PropertyWithEvent<int>();\n\n            _timer = new Timer(ms) {Enabled = true};\n            _timer.Elapsed += OnTimedEvent;\n\n        }\n\n        private void OnTimedEvent(object source, ElapsedEventArgs e)\n        {\n            CPU.Value = new Random().Next(10, 100);\n            RAM.Value = new Random().Next(1000, 8000);\n            NET.Value = new Random().Next(100, 10000);\n        }\n\n        public void CPU_Subscribe(EventHandler d) =&gt; CPU.WhenIChange += d;\n        public void RAM_Subscribe(EventHandler d) =&gt; RAM.WhenIChange += d;\n        public void NET_Subscribe(EventHandler d) =&gt; NET.WhenIChange += d;\n   }\n}</int></int></int></int></int></int></t></int></int></int></int></int></int></code></pre>\n\n<p><strong>The Output</strong></p><p><strong><img src=\"https://raw.githubusercontent.com/eramax/myBlogStorage/master/public/uploads/2020/6/1594640113zbsut.png\" style=\"width: 766px; height: 618px;\"><br></strong></p>","title":"dotnet core C# Events by example","slug":"dotnet-core-c-events-by-exampleopsg"}