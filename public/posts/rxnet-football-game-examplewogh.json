{"date":1603655215,"cats":[0,14,17,18,48],"content":"<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Reactive.Linq;\nusing System.Reactive.Subjects;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace RxSamples\n{\n    public class Demo5\n    {\n        public class PlayEvent\n        {\n            public string PlayerName { get; set; }\n        }\n        public class GoalEvent : PlayEvent\n        {\n            public int Count { get; set; }\n        }\n        public class SentOffEvent : PlayEvent\n        {\n            public string Reason { get; set; }\n        }\n        public class EventBroker : IObservable<playevent>\n        {\n            private Subject<playevent> subscriptions = new Subject<playevent>();\n            public IDisposable Subscribe(IObserver<playevent> observer)\n            {\n                return subscriptions.Subscribe(observer);\n            }\n            public void Publish(PlayEvent e)\n            {\n                subscriptions.OnNext(e);\n            }\n        }\n        public class Actor\n        {\n            public EventBroker Broker { get; }\n            public string Name { get; set; }\n            public Actor(string name , EventBroker broker)\n            {\n                Name = name;\n                Broker = broker;\n            }\n        }\n\n        \n        public class Player : Actor\n        {\n            private int goals { get; set; } = 0;\n            public Player(string name , EventBroker e) : base(name, e) \n            {\n                Broker\n                    .OfType<goalevent>()\n                    .Where(x =&gt; x.PlayerName != this.Name)\n                    .Subscribe(x =&gt; Console.WriteLine($\"{this.Name}: Well played {x.PlayerName}.\"));\n\n                Broker\n                    .OfType<sentoffevent>()\n                    .Where(x =&gt; x.PlayerName != this.Name)\n                    .Subscribe(x =&gt; Console.WriteLine($\"{this.Name}: Never mind {x.PlayerName}.\"));\n            }\n            public void Score()\n            {\n                goals++;\n                Broker.Publish(new GoalEvent { PlayerName = this.Name, Count = goals });\n            }\n\n            public void MakeMistake()\n            {\n                Broker.Publish(new SentOffEvent { PlayerName = this.Name, Reason = \"violence\" });\n            }\n        }\n        public class Coach : Actor\n        {\n            public Coach(string name, EventBroker e) : base(name, e)\n            {\n                Broker\n                    .OfType<goalevent>()\n                    .Where(x =&gt; x.PlayerName != this.Name)\n                    .Where(x =&gt; x.Count &gt; 3 )\n                    .Subscribe(x =&gt; Console.WriteLine($\"{this.Name}: excellent  {x.PlayerName}.\"));\n\n                Broker\n                    .OfType<sentoffevent>()\n                    .Where(x =&gt; x.PlayerName != this.Name)\n                    .Subscribe(x =&gt; Console.WriteLine($\"{this.Name}: How could you {x.PlayerName}!!!\"));\n            }\n        }\n\n        public class Game\n        {\n            public void Start()\n            {\n                var broker = new EventBroker();\n                broker\n                    .OfType<goalevent>()\n                    .Subscribe(x =&gt; Console.WriteLine($\"Game : new goal by {x.PlayerName}, his total goals = {x.Count}\"));\n                var players = new List<player>\n                {\n                    new Player(\"Ahmed\", broker),\n                    new Player(\"Ali\", broker),\n                    new Player(\"Moh\", broker)\n                };\n\n                var coach = new Coach(\"Captain\", broker);\n                var tokenSource = new CancellationTokenSource();\n                var randon = new Random();\n\n                players.ForEach(player =&gt;\n                    Task.Run(() =&gt;\n                    {\n                        while (!tokenSource.IsCancellationRequested)\n                        {\n                            player.Score();\n                            Thread.Sleep(randon.Next(10000));\n                        }\n                    })\n                );\n\n                Observable.Timer(TimeSpan.FromSeconds(15)).Subscribe(x =&gt;\n                {\n                    Console.WriteLine(\"Ending game\");\n                    tokenSource.Cancel();\n                });\n\n            }\n        }\n\n        public void Run()\n        {\n            var game = new Game();\n            game.Start();\n        }\n    }\n    \n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n            new Demo5().Run();\n            Console.ReadLine();\n        }\n    }\n}\n</player></goalevent></sentoffevent></goalevent></sentoffevent></goalevent></playevent></playevent></playevent></playevent></code></pre>\n\n<strong>The Output&nbsp;</strong><p><img src=\"https://raw.githubusercontent.com/eramax/myBlogStorage/master/public/uploads/2020/9/1603655215hafut.png\" style=\"width: 639px; height: 784px;\"></p><p><br></p>","title":"Rx.Net football game example","slug":"rxnet-football-game-examplewogh"}