{"date":1659887737,"cats":[0,1,3,4,5,6,8,11,15,51],"content":"<h2>The Goal</h2><p>I want to be able to publish every code commit of our react app.</p><p>Azure support deployment slots, which can be used but unfortunately, there is limited count of deployment slots that you can get.</p><h2>The solution</h2><p>By installing nginx as a deployment on kubernetes (single instance could be fine, you don't need to have an instance for each deployment) and make sure that nginx http folder is get mounted from azure file share</p><p>Moreover, we need to configure nginx to locate the project files based on the domain name.</p><p>By this we will end up with the following scenario:</p><ul><li><p>the user go to a.eample.com</p></li><li><p>there is an nginx-ingress controller on the aks and its task to forward any request to our nginx service</p></li><li><p>nginx service is going to forward the request to one of the nginx pods</p></li><li><p>nginx pod will receive the request which is the user wants a.example.com and then nginx will go to its primary www location which is mounted from azure file share to find a directory called a.example.com</p></li><li><p>nginx pod will find the desired directory a.example.com since it has been created by our CI/CD pipeline and the files already been added into the file share directory.</p></li><li><p>nginx pod will response to the user will all needed files.</p></li></ul><h2>Creating AKS</h2><div data-language=\"text\" class=\"toastui-editor-ww-code-block\"><pre><code>subscription=9cd\nrg=dev2\nlocation=SwedenCentral\ndomain=ddddd.ml\nAZ_AKS_NAME=k8s\nsta=ssss$rg\nSHARE_NAME=webapp\n\naz account set --subscription $subscription\naz group create -n $rg --location $location\t\n\naz network vnet create -n k8sVnet -g $rg --location $location --address-prefix \"10.1.0.0/16\"\naz network vnet subnet create -n k8sSubnet -g $rg --vnet-name k8sVnet --address-prefix \"10.1.0.0/22\"\naz network public-ip create -g $rg -n aks-public-ip --allocation-method Static --location $location --sku standard\nAKSPublicIP=$(az network public-ip show -g $rg -n aks-public-ip | jq .ipAddress -r)\n\nDNS_ID=$(az network dns zone create -g $rg -n $domain --query id -o tsv) \n\naz network dns zone create -g $rg -n $domain\naz network dns zone show -g $rg -n $domain --query nameServers -o tsv\n\naz aks create \\\n    -n $AZ_AKS_NAME \\\n    -g $rg \\\n    --enable-managed-identity \\\n    --location $location \\\n    --node-count 1 \\\n    --zones 1 2\\\n    --node-vm-size Standard_D4as_v5 \\\n    --network-plugin azure \\\n    --vnet-subnet-id /subscriptions/$subscription/resourceGroups/$rg/providers/Microsoft.Network/virtualNetworks/k8sVnet/subnets/k8sSubnet \\\n    --max-pods 150 \\\n    --generate-ssh-keys\n\naz aks get-credentials -g $rg -n $AZ_AKS_NAME\n\naksidentityprid=$(az aks show -n $AZ_AKS_NAME -g $rg | jq -r .identity.principalId)\naz role assignment create --role \"Network Contributor\" --assignee $aksidentityprid --scope /subscriptions/$subscription/resourceGroups/$rg</code></pre></div><h2>Creating azure storage - file share</h2><div data-language=\"text\" class=\"toastui-editor-ww-code-block\"><pre><code>\n# Create a storage account\naz storage account create -n $sta -g $rg -l $location --sku Standard_LRS\n\n# Export the connection string as an environment variable, this is used when creating the Azure file share\nAZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n $sta -g $rg -o tsv)\n\n# Create the file share\naz storage share create -n $SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING\n\n# Get storage account key\nSTORAGE_KEY=$(az storage account keys list --resource-group $rg --account-name $sta --query \"[0].value\" -o tsv)\n\n# Echo storage account name and key\necho Storage account name: $sta\necho Storage account key: $STORAGE_KEY\n\nkubectl create secret generic azure-secret --from-literal=azurestorageaccountname=$sta --from-literal=azurestorageaccountkey=$STORAGE_KEY</code></pre></div><h2>Mount azure file share to aks</h2><div data-language=\"text\" class=\"toastui-editor-ww-code-block\"><pre><code>apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: azurefile\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n    - ReadOnlyMany\n  persistentVolumeReclaimPolicy: Retain\n  storageClassName: azurefile-csi\n  csi:\n    driver: file.csi.azure.com\n    readOnly: true\n    volumeHandle: 44830fa8-79b4-406b-8b58-621ba25353fd  # make sure this volumeid is unique in the cluster\n    volumeAttributes:\n      resourceGroup: dev2  # optional, only set this when storage account is not in the same resource group as agent node\n      shareName: webapp\n    nodeStageSecretRef:\n      name: azure-secret\n      namespace: default\n  mountOptions:\n    - dir_mode=0555\n    - file_mode=0555\n    - uid=0\n    - gid=0\n    - mfsymlinks\n    - cache=strict\n    - nosharesock\n    - nobrl\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: azurefile\nspec:\n  accessModes:\n    - ReadOnlyMany\n  storageClassName: azurefile-csi\n  volumeName: azurefile\n  resources:\n    requests:\n      storage: 10Gi</code></pre></div><div data-language=\"text\" class=\"toastui-editor-ww-code-block\"><pre><code>``\n```## Installing nginx-ingress controller on AKS</code></pre></div><p>kubectl create namespace ngx</p><p>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx</p><p>helm repo update</p><p><br></p><p>helm upgrade  ingress-nginx ingress-nginx/ingress-nginx --namespace ngx --set controller.replicaCount=1 --set controller.nodeSelector.\"kubernetes.io/os\"=linux --set defaultBackend.nodeSelector.\"kubernetes.io/os\"=linux --set controller.service.externalTrafficPolicy=Local --set controller.service.annotations.\"service.beta.kubernetes.io/azure-load-balancer-resource-group\"=\"\" --set controller.watchIngressWithoutClass=true --set ingressClassResource.default=true --set controller.service.loadBalancerIP=\"\"</p><div data-language=\"text\" class=\"toastui-editor-ww-code-block\"><pre><code>ss</code></pre></div>","title":"single kubernetes nginx to support unlimited static web apps with their subdomains","slug":"single-kubernetes-nginx-to-support-unlimited-static-web-apps-with-their-subdomains-drr1"}